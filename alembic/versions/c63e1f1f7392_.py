"""empty message

Revision ID: c63e1f1f7392
Revises: b96b61e31844
Create Date: 2023-05-28 17:04:28.420619

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "c63e1f1f7392"
down_revision = "b96b61e31844"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("cart")
    op.drop_table("dish")
    op.drop_table("image")
    op.drop_table("restaurant_image")
    op.drop_constraint("restaurant_user_id_key", "restaurant", type_="unique")
    op.drop_constraint("restaurant_user_id_fkey", "restaurant", type_="foreignkey")
    op.drop_column("restaurant", "user_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "restaurant",
        sa.Column("user_id", postgresql.UUID(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "restaurant_user_id_fkey",
        "restaurant",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_unique_constraint("restaurant_user_id_key", "restaurant", ["user_id"])
    op.create_table(
        "restaurant_image",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "restaurant_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("image_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["image_id"], ["image.id"], name="restaurant_image_image_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
            name="restaurant_image_restaurant_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="restaurant_image_pkey"),
    )
    op.create_table(
        "image",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("url", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("alt", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("width", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("height", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="image_pkey"),
    )
    op.create_table(
        "dish",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "restaurant_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "category",
            postgresql.ENUM(
                "snack",
                "appetizer",
                "main_course",
                "dessert",
                "beverage",
                name="dish_category",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("rating_sum", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "number_of_voters", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
            name="dish_restaurant_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="dish_pkey"),
        sa.UniqueConstraint("name", name="dish_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "cart",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("dish_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "refresh_token_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(["dish_id"], ["dish.id"], name="cart_dish_id_fkey"),
        sa.ForeignKeyConstraint(
            ["refresh_token_id"],
            ["refresh_token.id"],
            name="cart_refresh_token_id_fkey",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="cart_user_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="cart_pkey"),
    )
    # ### end Alembic commands ###
